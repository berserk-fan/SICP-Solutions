(define (and-module eval put-evaluator get-op put-op)
  (define (eval-and-helper args)
    (cond ((eq? args '()) 'true)
	  ((eq? (cdr args) '()) (car args))
	  ((eq? (car args) 'false) 'false)
	  (else (eval-and-hepler (cdr args)))))
  (define (eval-and . args)
    (eval-and-helper args))
  (put-evaluator 'and eval-and))


(define (or-module eval put-evaluator get-op put-op)
  (define (eval-or-helper args)
    (cond (((eq? args '()) 'false)
	   ((eq? (cdr args) '()) (cdr args))
	   ((eq? (car args) 'true) 'true)
	   (else (eval-or-helper (cdr args))))))
  (define (eval-or . args)
    (eval-or-helper args))
  (put-evaluator 'or eval-or))

(define (initialize)
  (and-module)
  (or-module))
