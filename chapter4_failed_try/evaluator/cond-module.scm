(define (cond-module eval put-evaluator get-op put-op)
  (define (cond? exp) (tagged-list? exp 'cond))
  (define (cond-clauses exp) (cdr exp))
  (define (cond-else-clause? clause)
    (eq? (cond-predicate clause) 'else))
  (define (cond-predicate clause) (car clause))
  (define (cond-actions clause) (cdr clause))
  (define (expand-clauses clauses)
    (if (null? clauses)
	'false                          ; no else clause
	(let ((first (car clauses))
	      (rest (cdr clauses)))
	  (if (cond-else-clause? first)
	      (if (null? rest)
		  (sequence->exp (cond-actions first))
		  (error "ELSE clause isn't last -- COND->IF"
			 clauses))
	      ((get-op 'if 'make-if) (cond-predicate first)
		       (sequence->exp (cond-actions first))
		       (expand-clauses rest))))))
  (define (cond->if exp)
    (expand-clauses (cond-clauses exp)))
  (define (eval-cond exp env)
    (eval (cond->if exp) env))
  (put-evaluator 'cond eval-cond))

cond-module
